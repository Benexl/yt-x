/usr/bin/env bash

# This is just the extracted main function of the main script 
# basically an extension provides an alternate ui and can also define 
# other env and function overides
# without having too write everything from scratch
# For basic and less frequent usage i'd advice you just use the main scripts 
# custom Commands
# which will work for most other sites yt-dlp supports
# with little to no issue

main() {
	SHELL="bash"
	clear
	action="$(printf "\
${CYAN}${RESET}  Your Fed
${CYAN}${RESET}  Trending
${CYAN}󰐑${RESET}  Playlists
${CYAN}${RESET}  Search
${CYAN}${RESET}  Watch Later
${CYAN}󰵀${RESET}  Subscription Feed
${CYAN}󰑈${RESET}  Channels
${CYAN}${RESET}  Custom Playlists
${CYAN}${RESET}  Liked Videos
${CYAN}${RESET}  Saved Videos
${CYAN}${RESET}  Watch History
${CYAN}${RESET}  Recent
${CYAN}${RESET}  Clips
${CYAN}${RESET}  Edit Config
${CYAN}${RESET}  Miscellaneous
${RED}󰈆${RESET}  Exit
" | launcher "Select Action" | sed 's/.*  //g')"
	[ "$action" = "Exit" ] && byebye

	unset urlForAll
	case "$action" in
	"Your Feed")
		url="https://www.youtube.com"
		search_results=$(run_yt_dlp "$url")
		playlist_explorer
		;;
	Trending)
		url="https://www.youtube.com/feed/trending"
		search_results=$(run_yt_dlp "$url")
		playlist_explorer
		;;
	Search)
		clear
		search_term="$(prompt "Enter term to search for")"
		[ "$SEARCH_HISTORY" = "true" ] && [ -s "$CLI_CACHE_DIR/search_history.txt" ] && history=$(grep --invert-match "^$search_term\$" "$CLI_CACHE_DIR/search_history.txt")
		[ "$SEARCH_HISTORY" = "true" ] && [ -s "$CLI_CACHE_DIR/search_history.txt" ] && echo "$history" >$CLI_CACHE_DIR/search_history.txt
		[ "$SEARCH_HISTORY" = "true" ] && echo "$search_term" >>"$CLI_CACHE_DIR/search_history.txt"
		search_term=$(echo "$search_term" | jq -Rr '@uri')
		url="https://www.youtube.com/results?search_query=$search_term&sp=EgIQAQ%253D%253D"
		search_results=$(run_yt_dlp "$url")
		playlist_explorer
		;;
	"Subscription Feed")
		url="https://www.youtube.com/feed/subscriptions"
		search_results=$(run_yt_dlp "$url")
		playlist_explorer
		;;
	Playlists)
		url="https://www.youtube.com/feed/playlists"
		playlists_explorer
		;;
	"Saved Videos")
		! [ -s "$CLI_CONFIG_DIR/saved_videos.json" ] && echo No saved videos && sleep "$NOTIFICATION_DURATION" && main
		search_results=$(cat "$CLI_CONFIG_DIR/saved_videos.json")
		playlist_explorer
		;;
	Recent)
		! [ -s "$CLI_CONFIG_DIR/recent.json" ] && echo No recent videos && sleep "$NOTIFICATION_DURATION" && main
		search_results=$(cat "$CLI_CONFIG_DIR/recent.json" | jq '{"entries":.entries|reverse}')
		playlist_explorer
		;;
	Channels)
		while true; do
			get_channels_data
			channels=$(echo "$channels_data" | jq '.entries[].channel' -r)
			export SHELL CLI_CONFIG_DIR
			channel_name=$(printf "%s\nMain Menu\nExit" "$channels" | launcher_with_preview "Select Channel" "$PREVIEW_SCRIPT_FOR_CHANNELS")
			channel_name="$(echo "$channel_name" | sed 's/"/\\"/g;s/ *$//g' | tr -d "\n")"
			[ "$channel_name" = "Exit" ] && byebye
			[ "$channel_name" = "Main Menu" ] && break
			channel="$(echo "$channels_data" | jq ".entries|map(select(.channel == \"$channel_name\"))|.[0]")"
			channels_explorer
		done
		;;
	Custom\ Playlists)
		! [ -s "$CUSTOM_PLAYLISTS" ] && echo "You dont have any custom playlists create them here <$CUSTOM_PLAYLISTS>" && sleep "$NOTIFICATION_DURATION" && main
		while true; do
			playlist_title=$(printf "%s\nBack" "$(jq -r '.[].name' "$CUSTOM_PLAYLISTS")" | launcher "Select Custom Playlist To Play")
			[ "$playlist_title" = "Back" ] && break
			url=$(jq -r ". | map(select(.name == \"$playlist_title\" )) | .[0].playlistWatchUrl" "$CUSTOM_PLAYLISTS")
			urlForAll=$(jq -r ". | map(select(.name == \"$playlist_title\" )) | .[0].playlistUrl" "$CUSTOM_PLAYLISTS")
			search_results=$(run_yt_dlp "$url")
			playlist_explorer
		done
		;;
	"Liked Videos")
		url="https://www.youtube.com/playlist?list=LL"
		search_results=$(run_yt_dlp "$url")
		playlist_explorer
		;;
	"Watch Later")
		url="https://www.youtube.com/playlist?list=WL"
		search_results=$(run_yt_dlp "$url")
		playlist_explorer
		;;
	"Watch History")
		url="https://www.youtube.com/feed/history"
		search_results=$(run_yt_dlp "$url")
		playlist_explorer
		;;
	Clips)
		url="https://www.youtube.com/feed/clips"
		search_results=$(run_yt_dlp "$url")
		playlist_explorer
		;;
	"Edit Config")
		if command -v "$EDITOR" >/dev/null 2>&1; then
			$EDITOR "$CLI_CONFIG_DIR/${CLI_NAME}.conf"
		elif command -v "open" >/dev/null 2>&1; then
			open "$CLI_CONFIG_DIR/${CLI_NAME}.conf"
		elif command -v "xdg-open" >/dev/null 2>&1; then
			xdg-open "$CLI_CONFIG_DIR/${CLI_NAME}.conf"
		else
			send_notification "Could not find editor env ($EDITOR) or xdg-open or open"
		fi
		load_config
		;;
	Miscellaneous)
		while true; do
			action="$(printf "\
${CYAN}󰵀${RESET}  Explore Channels
${CYAN}󰐑${RESET}  Explore Playlists
${CYAN}󱘢${RESET}  Search History
${CYAN}󰆺${RESET}  New Custom Command
${CYAN}󰡦${RESET}  Custom Commands
${CYAN}${RESET}  Edit Search History
${CYAN}󰤀${RESET}  Edit Custom Playlists
${CYAN}󱄢${RESET}  Edit MPV Config
${CYAN}󰮆${RESET}  Edit yt-dlp Config
${CYAN}󱘫${RESET}  Edit Custom Commands
${RED}󰆴${RESET}  Clear Search History
${RED}${RESET}  Back
${RED}󰈆${RESET}  Exit
" | launcher "Select Action" | sed 's/.*  //g')"
			case "$action" in
			Explore\ Channels)
				unset search_term
				while true; do
					clear
					[ -z "$search_term" ] && search_term=$(prompt "What channel would you like to explore") && url="https://www.youtube.com/results?search_query=$search_term&sp=EgIQAg%253D%253D" && channels_data=$(
						if command -v "gum" >/dev/null 2>&1; then
							gum spin --show-output -- yt-dlp "$url" -J --flat-playlist --extractor-args youtubetab:approximate_date $PREFERRED_BROWSER --playlist-start 1 --playlist-end $NO_OF_SEARCH_RESULTS
						else
							echo "Loading..." >/dev/stderr
							yt-dlp "$url" -J --flat-playlist --extractor-args youtubetab:approximate_date $PREFERRED_BROWSER --playlist-start 1 --playlist-end $NO_OF_SEARCH_RESULTS
						fi
					) && download_preview_images "$channels_data" "https:"
					clear
					channels=$(echo "$channels_data" | jq '.entries[].channel' -r)
					export channels_data SHELL
					channel_name=$(printf "%s\nBack\nExit" "$channels" | launcher_with_preview "Select Channel" "$PREVIEW_SCRIPT_FOR_CHANNELS_EXPLORER")
					channel_name="$(echo "$channel_name" | sed 's/"/\\"/g;s/ *$//g' | tr -d "\n")"
					[ "$channel_name" = "Exit" ] && byebye
					[ "$channel_name" = "Back" ] && break
					channel="$(echo "$channels_data" | jq ".entries|map(select(.channel == \"$channel_name\"))|.[0]")"
					channels_explorer
				done
				unset channels_data
				;;
			Explore\ Playlists)
				clear
				search_term=$(prompt "What playlist would you like to explore")
				url="https://www.youtube.com/results?search_query=$search_term&sp=EgIQAw%253D%253D"
				PLAYLISTS_EXTRA_ARGS="--playlist-start 1 --playlist-end $NO_OF_SEARCH_RESULTS"
				playlists_explorer
				unset PLAYLISTS_EXTRA_ARGS
				;;
			Search\ History)
				clear
				! [ -s "$CLI_CACHE_DIR/search_history.txt" ] && echo "No search history or disabed" && sleep "$NOTIFICATION_DURATION" && main
				search_term="$(tac "$CLI_CACHE_DIR/search_history.txt" | launcher "Search for" | jq -Rr '@uri')"
				url="https://www.youtube.com/results?search_query=$search_term&sp=EgIQAQ%253D%253D"
				search_results=$(run_yt_dlp "$url")
				playlist_explorer
				;;
			New\ Custom\ Command)
				clear
				custom_yt_dlp_cmd=$(prompt "Enter the custom yt-dlp command" "yt-dlp -J --flat-playlist --extractor-args youtubetab:approximate_date $PREFERRED_BROWSER https://youtube.com")
				custom_cmds="[]"
				[ -s "$F_CUSTOM_CMDS" ] && custom_cmds=$(cat "$F_CUSTOM_CMDS")
				custom_cmd_name=$(prompt "Enter the name of the new custom command")
				custom_cmd="
          {
            \"name\": \"$custom_cmd_name\",
            \"cmd\": \"$custom_yt_dlp_cmd\"
          }
        "
				echo "$custom_cmds" | jq ".+=[$custom_cmd]" >"$F_CUSTOM_CMDS" && send_notification "successfully added to custom cmds" || send_notification "Failed to add to custom cmds"

				echo Running new custom command...
				search_results=$(
					if command -v "gum" >/dev/null 2>&1; then
						gum spin --show-output --show-error -- $custom_yt_dlp_cmd || send_notification "Failed to fetch data : ("
					else
						echo "Loading..." >/dev/stderr
						$custom_yt_dlp_cmd || send_notification "Failed to fetch data : ("
					fi
				)

				playlist_explorer
				;;
			Custom\ Commands)
				! [ -s "$F_CUSTOM_CMDS" ] && send_notification "You dont have any custom cmds create them here <$F_CUSTOM_CMDS>"
				while true; do
					custom_cmd_name=$(printf "%s\nBack" "$(jq -r '.[].name' "$F_CUSTOM_CMDS")" | launcher "Select Custom Data Loader Command To Run")
					[ "$custom_cmd_name" = "Back" ] && break
					custom_yt_dlp_cmd=$(jq -r ". | map(select(.name == \"$custom_cmd_name\" )) | .[0].cmd" "$F_CUSTOM_CMDS")
					echo Running custom command...
					search_results=$(
						if command -v "gum" >/dev/null 2>&1; then
							gum spin --show-output --show-error -- $custom_yt_dlp_cmd || send_notification "Failed to fetch data : ("
						else
							echo "Loading..." >/dev/stderr
							$custom_yt_dlp_cmd || send_notification "Failed to fetch data : ("
						fi
					)
					playlist_explorer
				done
				;;
			Edit\ Search\ History)
				if command -v "$EDITOR" >/dev/null 2>&1; then
					$EDITOR "$CLI_CACHE_DIR/search_history.txt"
				elif command -v "open" >/dev/null 2>&1; then
					open "$CLI_CACHE_DIR/search_history.txt"
				elif command -v "xdg-open" >/dev/null 2>&1; then
					xdg-open "$CLI_CACHE_DIR/search_history.txt"
				else
					send_notification "Could not find editor env ($EDITOR) or xdg-open or open"
				fi
				;;
			Edit\ Custom\ Playlists)
				if command -v "$EDITOR" >/dev/null 2>&1; then
					$EDITOR "$CLI_CONFIG_DIR/custom_playlists.json"
				elif command -v "open" >/dev/null 2>&1; then
					open "$CLI_CONFIG_DIR/custom_playlists.json"
				elif command -v "xdg-open" >/dev/null 2>&1; then
					xdg-open "$CLI_CONFIG_DIR/custom_playlists.json"
				else
					send_notification "Could not find editor env ($EDITOR) or xdg-open or open"
				fi
				;;
			Edit\ Custom\ Commands)
				if command -v "$EDITOR" >/dev/null 2>&1; then
					$EDITOR "$F_CUSTOM_CMDS"
				elif command -v "open" >/dev/null 2>&1; then
					open "$F_CUSTOM_CMDS"
				elif command -v "xdg-open" >/dev/null 2>&1; then
					xdg-open "$F_CUSTOM_CMDS"
				else
					send_notification "Could not find editor env ($EDITOR) or xdg-open or open"
				fi
				;;

			Edit\ MPV\ Config)
				if command -v "$EDITOR" >/dev/null 2>&1; then
					$EDITOR "$HOME/.config/mpv/mpv.conf"
				elif command -v "open" >/dev/null 2>&1; then
					open "$HOME/.config/mpv/mpv.conf"
				elif command -v "xdg-open" >/dev/null 2>&1; then
					xdg-open "$HOME/.config/mpv/mpv.conf"
				else
					send_notification "Could not find editor env ($EDITOR) or xdg-open or open"
				fi
				;;
			"Edit yt-dlp Config")
				if command -v "$EDITOR" >/dev/null 2>&1; then
					$EDITOR "$HOME/.config/yt-dlp/config"
				elif command -v "open" >/dev/null 2>&1; then
					open "$HOME/.config/yt-dlp/config"
				elif command -v "xdg-open" >/dev/null 2>&1; then
					xdg-open "$HOME/.config/yt-dlp/config"
				else
					send_notification "Could not find editor env ($EDITOR) or xdg-open or open"
				fi
				;;
			Clear\ Search\ History)
				confirm "Are you sure you want to clear your search history ($CLI_CACHE_DIR/search_history.txt)" && rm "$CLI_CACHE_DIR/search_history.txt"
				;;
			Back)
				break
				;;
			Exit)
				byebye
				;;
			*)
				echo invalid action
				sleep "$NOTIFICATION_DURATION"
				;;
			esac
		done
		;;
	Exit)
		byebye
		;;
	*)
		echo invalid action
		sleep "$NOTIFICATION_DURATION"
		;;
	esac
	main
}
